'use client'

import React, { useState } from 'react'
import { SparklesIcon, PlusIcon, PencilIcon, ArrowRightIcon } from '@heroicons/react/24/solid'

interface ServiceRefinementProps {
  planTier: 'starter' | 'professional' | 'business'
  businessName: string
  onStepComplete: () => void
}

export default function ServiceRefinement({
  planTier,
  businessName,
  onStepComplete
}: ServiceRefinementProps) {
  const [selectedServices, setSelectedServices] = useState<string[]>([])
  const [newService, setNewService] = useState('')
  const [showAddForm, setShowAddForm] = useState(false)

  // Sample auto-generated services (from Phase 1)
  const autoGeneratedServices = [
    { id: '1', name: 'Classic Manicure', price: 35, duration: 30, popular: true },
    { id: '2', name: 'Gel Manicure', price: 50, duration: 45, popular: true },
    { id: '3', name: 'French Manicure', price: 40, duration: 35, popular: false },
    { id: '4', name: 'Acrylic Full Set', price: 70, duration: 90, popular: true },
    { id: '5', name: 'Nail Art Design', price: 25, duration: 20, popular: false },
    { id: '6', name: 'Classic Pedicure', price: 45, duration: 60, popular: true }
  ]

  const handleServiceToggle = (serviceId: string) => {
    setSelectedServices(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    )
  }

  const handleAddService = () => {
    if (newService.trim()) {
      // In real implementation, this would add to database
      setNewService('')
      setShowAddForm(false)
    }
  }

  const handleContinue = () => {
    onStepComplete()
  }

  const tierFeatures = {
    starter: [
      'Manage up to 10 different services',
      'Basic service pricing and duration',
      'Simple service descriptions',
      'Quick service editing'
    ],
    professional: [
      'Unlimited services and categories',
      'Advanced pricing rules and discounts',
      'Service packages and bundles',
      'Customer preference tracking',
      'Service popularity analytics',
      'Seasonal service promotions'
    ],
    business: [
      'Multi-location service management',
      'Service standardization across locations',
      'Advanced service analytics',
      'Franchise-level service control',
      'Location-specific service availability',
      'Enterprise service reporting'
    ]
  }

  return (
    <div className="space-y-6">
      {/* Introduction */}
      <div className="text-center">
        <SparklesIcon className="w-12 h-12 text-purple-600 mx-auto mb-4" />
        <h3 className="text-xl font-bold text-gray-900 mb-2">
          Refine Your Services
        </h3>
        <p className="text-gray-600">
          We automatically created these services for you. Add, remove, or edit them to match your business perfectly.
        </p>
      </div>

      {/* Auto-Generated Services */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold text-blue-900 mb-3">
          ‚ú® Your Auto-Generated Services
        </h4>
        <p className="text-blue-800 text-sm mb-4">
          We created these based on your business type. Select the services you want to keep and customize as needed.
        </p>
        
        <div className="grid gap-3">
          {autoGeneratedServices.map((service) => (
            <div 
              key={service.id}
              className={`flex items-center justify-between p-3 bg-white rounded-lg border transition-all cursor-pointer ${
                selectedServices.includes(service.id)
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleServiceToggle(service.id)}
            >
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  checked={selectedServices.includes(service.id)}
                  onChange={() => handleServiceToggle(service.id)}
                  className="rounded border-gray-300"
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <span className="font-medium text-gray-900">{service.name}</span>
                    {service.popular && (
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                        Popular
                      </span>
                    )}
                  </div>
                  <div className="text-sm text-gray-600">
                    ${service.price} ‚Ä¢ {service.duration} minutes
                  </div>
                </div>
              </div>
              
              <button className="p-1 text-gray-400 hover:text-gray-600">
                <PencilIcon className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Add Custom Service */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-semibold text-green-900">
            üéØ Add Custom Services
          </h4>
          {!showAddForm && (
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-green-600 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center"
            >
              <PlusIcon className="w-4 h-4 mr-1" />
              Add Service
            </button>
          )}
        </div>
        
        {showAddForm && (
          <div className="space-y-3">
            <input
              type="text"
              value={newService}
              onChange={(e) => setNewService(e.target.value)}
              placeholder="Enter service name (e.g., 'Luxury Spa Pedicure')"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
            />
            <div className="flex space-x-2">
              <button
                onClick={handleAddService}
                disabled={!newService.trim()}
                className="bg-green-600 text-white px-4 py-2 rounded-md font-medium hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Add Service
              </button>
              <button
                onClick={() => { setShowAddForm(false); setNewService('') }}
                className="bg-gray-300 text-gray-700 px-4 py-2 rounded-md font-medium hover:bg-gray-400 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        )}
        
        {!showAddForm && (
          <p className="text-green-800 text-sm">
            Don't see a service you offer? Add your own custom services to match your business exactly.
          </p>
        )}
      </div>

      {/* Plan Features */}
      <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
        <h4 className="font-semibold text-purple-900 mb-3">
          üéâ Your {planTier.charAt(0).toUpperCase() + planTier.slice(1)} Plan Service Features:
        </h4>
        <ul className="text-purple-800 text-sm space-y-1">
          {tierFeatures[planTier].map((feature, index) => (
            <li key={index}>‚úÖ {feature}</li>
          ))}
        </ul>
      </div>

      {/* Service Management Tips */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <h5 className="font-semibold text-yellow-800 mb-2">üí° Pro Tips:</h5>
        <ul className="text-yellow-700 text-sm space-y-1">
          <li>‚Ä¢ <strong>Popular services</strong> are shown first to customers during booking</li>
          <li>‚Ä¢ <strong>Accurate pricing</strong> helps your AI assistant provide precise quotes</li>
          <li>‚Ä¢ <strong>Realistic durations</strong> prevent overbooking and ensure smooth scheduling</li>
          {planTier !== 'starter' && (
            <li>‚Ä¢ <strong>Service bundles</strong> can increase your average booking value</li>
          )}
          {planTier === 'business' && (
            <li>‚Ä¢ <strong>Location-specific services</strong> allow customization per location</li>
          )}
        </ul>
      </div>

      {/* Settings Link */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <h5 className="font-semibold text-gray-900 mb-2">‚öôÔ∏è Detailed Service Management</h5>
        <p className="text-gray-700 text-sm mb-3">
          For advanced service customization, pricing rules, and detailed descriptions, visit your Services settings page.
        </p>
        <button className="text-blue-600 hover:text-blue-700 font-medium text-sm">
          Go to Services Settings ‚Üí
        </button>
      </div>

      {/* Continue Button */}
      <div className="text-center pt-4">
        <button
          onClick={handleContinue}
          className="bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-purple-700 transition-colors inline-flex items-center"
        >
          Continue Training
          <ArrowRightIcon className="w-4 h-4 ml-2" />
        </button>
        <p className="text-sm text-gray-600 mt-2">
          You can always modify services later from Settings ‚Üí Services
        </p>
      </div>
    </div>
  )
}