{
  "name": "VoiceFly - SMS Marketing Campaign",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sms-campaign/send",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "id": "sms-webhook",
      "name": "SMS Campaign Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Parse SMS campaign request\nconst input = $json;\n\nconst campaign = {\n  campaign_id: input.campaign_id || `sms_${Date.now()}`,\n  business_id: input.business_id,\n  campaign_name: input.campaign_name || 'Untitled SMS Campaign',\n  \n  // SMS content (max 160 chars for single SMS)\n  message: input.message,\n  message_length: input.message.length,\n  sms_segments: Math.ceil(input.message.length / 160),\n  \n  // Targeting\n  segment: input.segment || 'all', // all, customers, leads, vip\n  tags: input.tags || [],\n  \n  // Sender\n  from_number: input.from_number || input.business_phone,\n  \n  // Link tracking\n  include_link: input.include_link || false,\n  tracking_url: input.tracking_url || null,\n  \n  // Compliance\n  include_opt_out: input.include_opt_out !== false, // Required by law\n  \n  created_at: new Date().toISOString(),\n  status: 'processing'\n};\n\n// Append opt-out message if required\nif (campaign.include_opt_out && !campaign.message.toLowerCase().includes('reply stop')) {\n  campaign.message += ' Reply STOP to opt out.';\n  campaign.message_length = campaign.message.length;\n  campaign.sms_segments = Math.ceil(campaign.message.length / 160);\n}\n\n// Validate message length\nif (campaign.sms_segments > 3) {\n  throw new Error(`Message too long: ${campaign.message_length} chars (${campaign.sms_segments} segments). Max recommended: 480 chars (3 segments).`);\n}\n\nconsole.log(`SMS Campaign: ${campaign.campaign_name}`);\nconsole.log(`Message length: ${campaign.message_length} chars (${campaign.sms_segments} segments)`);\n\nreturn [{ json: campaign }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "parse-sms-campaign",
      "name": "Parse SMS Campaign"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "customers",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "business_id",
              "condition": "eq",
              "keyValue": "={{ $json.business_id }}"
            },
            {
              "keyName": "sms_opted_in",
              "condition": "eq",
              "keyValue": "=true"
            },
            {
              "keyName": "phone",
              "condition": "neq",
              "keyValue": "="
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "get-sms-recipients",
      "name": "Get SMS Recipients (Opted In)"
    },
    {
      "parameters": {
        "jsCode": "// Filter recipients based on segment\nconst campaign = $('Parse SMS Campaign').first().json;\nconst allRecipients = $input.all().map(item => item.json);\n\nlet recipients = allRecipients;\n\n// Apply segment filtering\nswitch(campaign.segment) {\n  case 'customers':\n    recipients = recipients.filter(r => r.total_purchases > 0);\n    break;\n  case 'leads':\n    recipients = recipients.filter(r => r.total_purchases === 0);\n    break;\n  case 'vip':\n    recipients = recipients.filter(r => r.total_spent > 1000 || r.loyalty_tier === 'vip');\n    break;\n  case 'all':\n  default:\n    // No filter\n    break;\n}\n\n// Apply tag filtering if specified\nif (campaign.tags && campaign.tags.length > 0) {\n  recipients = recipients.filter(r => {\n    const customerTags = r.tags || [];\n    return campaign.tags.some(tag => customerTags.includes(tag));\n  });\n}\n\nconsole.log(`SMS recipients after filtering: ${recipients.length}`);\nconsole.log(`Estimated cost: $${(recipients.length * campaign.sms_segments * 0.0075).toFixed(2)} (at $0.0075/segment)`);\n\n// Personalize message for each recipient\nreturn recipients.map(recipient => {\n  let personalizedMessage = campaign.message;\n  \n  // Replace personalization tokens\n  personalizedMessage = personalizedMessage\n    .replace(/\\{\\{first_name\\}\\}/gi, recipient.first_name || 'there')\n    .replace(/\\{\\{last_name\\}\\}/gi, recipient.last_name || '')\n    .replace(/\\{\\{name\\}\\}/gi, `${recipient.first_name} ${recipient.last_name}`.trim() || 'there');\n  \n  return {\n    json: {\n      ...campaign,\n      recipient_phone: recipient.phone,\n      recipient_name: `${recipient.first_name} ${recipient.last_name}`,\n      recipient_id: recipient.id,\n      personalized_message: personalizedMessage\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "filter-personalize",
      "name": "Filter & Personalize"
    },
    {
      "parameters": {
        "batchSize": 50,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1120, 300],
      "id": "batch-sms",
      "name": "Batch SMS (Rate Limiting)"
    },
    {
      "parameters": {
        "fromNumber": "={{ $json.from_number }}",
        "toNumber": "={{ $json.recipient_phone }}",
        "message": "={{ $json.personalized_message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [1340, 300],
      "id": "send-sms",
      "name": "Send SMS"
    },
    {
      "parameters": {
        "operation": "insert",
        "tableId": "sms_campaign_sends",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "campaign_id",
              "fieldValue": "={{ $json.campaign_id }}"
            },
            {
              "fieldId": "recipient_id",
              "fieldValue": "={{ $json.recipient_id }}"
            },
            {
              "fieldId": "recipient_phone",
              "fieldValue": "={{ $json.recipient_phone }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.personalized_message }}"
            },
            {
              "fieldId": "segments",
              "fieldValue": "={{ $json.sms_segments }}"
            },
            {
              "fieldId": "sent_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "sent"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "log-sms-send",
      "name": "Log SMS Send"
    },
    {
      "parameters": {
        "amount": 100,
        "unit": "milliseconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1340, 460],
      "id": "rate-limit",
      "name": "Rate Limit (100ms)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"campaign_id\": $json.campaign_id, \"total_recipients\": $json.total_recipients, \"segments_per_message\": $json.sms_segments, \"status\": \"sending\" } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [680, 120],
      "id": "webhook-response",
      "name": "Send Response"
    }
  ],
  "connections": {
    "SMS Campaign Trigger": {
      "main": [[{ "node": "Parse SMS Campaign", "type": "main", "index": 0 }]]
    },
    "Parse SMS Campaign": {
      "main": [[
        { "node": "Get SMS Recipients (Opted In)", "type": "main", "index": 0 },
        { "node": "Send Response", "type": "main", "index": 0 }
      ]]
    },
    "Get SMS Recipients (Opted In)": {
      "main": [[{ "node": "Filter & Personalize", "type": "main", "index": 0 }]]
    },
    "Filter & Personalize": {
      "main": [[{ "node": "Batch SMS (Rate Limiting)", "type": "main", "index": 0 }]]
    },
    "Batch SMS (Rate Limiting)": {
      "main": [[{ "node": "Send SMS", "type": "main", "index": 0 }]]
    },
    "Send SMS": {
      "main": [[
        { "node": "Log SMS Send", "type": "main", "index": 0 },
        { "node": "Rate Limit (100ms)", "type": "main", "index": 0 }
      ]]
    },
    "Rate Limit (100ms)": {
      "main": [[{ "node": "Batch SMS (Rate Limiting)", "type": "main", "index": 0 }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}
